jupyterhub:
  proxy:
    nodeSelector:
      cloud.google.com/gke-nodepool: default-pool
    service:
      type: ClusterIP
  ingress:
    enabled: true
    annotations:
      ingress.kubernetes.io/proxy-body-size: 64m
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
      - simula-summer-school.minrk.net
    tls:
      - secretName: kubelego-tls-jupyterhub
        hosts:
          - simula-summer-school.minrk.net
  auth:
    type: github
    admin:
      access: true
      users:
        - minrk
    github:
      callbackUrl: "https://simula-summer-school.minrk.net/hub/oauth_callback"

  singleuser:
    storage:
      homeMountPath: /home/user
    image:
      name: minrk/simula-summer-school
      tag: 2018
      pullPolicy: Always
    memory:
      limit: 2G
      guarantee: 2G
    cpu:
      limit: 2
      guarantee: 0.25

  prePuller:
    continuous:
      enabled: true

  hub:
    nodeSelector:
      cloud.google.com/gke-nodepool: default-pool
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: /hub/metrics
    extraConfig:
      slowSpawn: |
        c.JupyterHub.tornado_settings.update({'slow_spawn_timeout': 1})
      api404: |
        from tornado import web
        class FourOFour(web.RequestHandler):
            def get(self):
                raise web.HTTPError(404, "Server is not running")
        from jupyterhub.app import JupyterHub
        from tornado.ioloop import IOLoop
        def f():
            app = JupyterHub.instance()
            if not getattr(app, 'tornado_application', None):
                IOLoop.current().call_later(1, f)
                return
            app.log.info("Adding 404 handler")
            host_pattern = '.*$'
            app.tornado_application.add_handlers(
                '.*$',
                [(r"/user/[^/]+/api/.*", FourOFour)]
            )
        IOLoop.current().add_callback(f)

grafana:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-pool
  grafana.ini:
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Viewer
    auth.basic:
      enabled: true
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
      - grafana.simula-summer-school.minrk.net
    tls:
      - hosts:
          - grafana.simula-summer-school.minrk.net
        secretName: kubelego-tls-grafana
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus
          orgId: 1
          type: prometheus
          url: https://prometheus.simula-summer-school.minrk.net
          access: direct
          isDefault: true
          editable: false

prometheus:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-pool
  nodeExporter:
    updateStrategy:
      type: RollingUpdate
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
      hosts:
        - prometheus.simula-summer-school.minrk.net
      tls:
        - hosts:
            - prometheus.simula-summer-school.minrk.net
          secretName: kubelego-tls-prometheus

kube-lego:
  config:
    LEGO_EMAIL: benjaminrk@simula.no
    LEGO_URL: https://acme-v01.api.letsencrypt.org/directory
  rbac:
    create: true

nginx-ingress:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-pool
  rbac:
    create: true
  statsExporter:
    service:
      annotations:
        prometheus.io/scrape: "true"
  controller:
    replicaCount: 2
    scope:
      enabled: true
    config:
      # Allow POSTs of upto 64MB, for large notebook support.
      proxy-body-size: 64m
    stats:
      enabled: true
    service:
      # Preserve client IPs
      externalTrafficPolicy: Local
